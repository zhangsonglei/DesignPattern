命令模式(Command) 行为型: 

意图：
	将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，
	对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。

适用场景：
	1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。
	2.系统需要在不同的时间指定请求、将请求排队和执行请求。
	3.系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。
	4.系统需要将一组操作组合在一起，即支持宏命令。

命令模式的结构：
	Command类：是一个抽象类，类中对需要执行的命令进行声明，
			一般来说要对外公布一个execute方法用来执行命令。
	ConcreteCommand类：Command类的实现类，对抽象类中声明的方法进行实现。
	Client类：最终的客户端调用类。
	Invoker类：调用者，负责调用命令。
	Receiver类：接收者，负责接收命令并且执行命令。

小结:
	命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分隔开.
	优点 ：
		较容易设计一个命令队列;
		较容易将命令记录日志;
		允许接受请求的一方决定是否要否决请求;
		较容易地实现对请求的撤销与重做;
		由于添加新的具体命令对其他类没有任何影响, 因此增加新的具体命令很容易;
	缺点：
		使用命令模式可能会导致某些系统有过多的具体命令类。
		因为针对每一个命令都需要设计一个具体命令类，
		因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。

实例：
	司令员下令让士兵去干件事情。
	从整个事情的角度来考虑，司令员的作用是：
		发出口令
		口令经过传递
		传到了士兵耳朵里
		士兵去执行。
	