组合模式(Composite) 结构型：
	将对象组组合树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。
	组合模式的实现根据所实现接口的区别分为两种形式，分别称为安全式和透明式。

安全式：
	安全模式的组合模式要求管理聚集的方法只出现在树枝构件类中，而不出现在树叶构件类中。
	这种形式涉及到三个角色：
　　		抽象构件(Component)角色：这是一个抽象角色，它给参加组合的对象定义出公共的接口及其默认行为，
			可以用来管理所有的子对象。组合对象通常把它所包含的子对象当做类型为Component的对象。
			在安全式的组合模式里，构件角色并不定义出管理子对象的方法，这一定义由树枝构件对象给出。
		树叶构件(Leaf)角色：树叶对象是没有下级子对象的对象，定义出参加组合的原始对象的行为。
　　		树枝构件(Composite)角色：代表参加组合的有下级子对象的对象。树枝构件类给出所有的管理子对象的方法。

透明式：
	透明式的组合模式要求所有的具体构件类，不论树枝构件还是树叶构件，均符合一个固定接口。
	
安全式和透明式的选择：
　　安全性组合模式是指：从客户端使用组合模式上看是否更安全，如果是安全的，那么就不会有发生误操作的可能，
				能访问的方法都是被支持的。
　　透明性组合模式是指：从客户端使用组合模式上，是否需要区分到底是“树枝对象”还是“树叶对象”。
			如果是透明的，那就不用区分，对于客户而言，都是Compoent对象，具体的类型对于客户端而言是透明的，
			是无须关心的。
			
　　对于组合模式而言，在安全性和透明性上，会更看重透明性，毕竟组合模式的目的是：
		让客户端不再区分操作的是树枝对象还是树叶对象，而是以一个统一的方式来操作。
　　而且对于安全性的实现，需要区分是树枝对象还是树叶对象。有时候，需要将对象进行类型转换，
		却发现类型信息丢失了，只好强行转换，这种类型转换必然是不够安全的。
　　因此在使用组合模式的时候，建议多采用透明性的实现方式。　

使用场景：
	用于对象的部分-整体层次结构，如树形菜单、文件夹菜单、部门组织架构图等；
	对用户隐藏组合对象与单个对象的不同，使得用户统一地使用组合结构中的所有对象。
	
小结：
	组合模式定义了基本对象和组合对象的类层次结构，基本对象可以被组组合更复杂的组合对象，而这个组合对象又可以被组合，
		这样不断地递归下去，这样在客户代码中任何用到基本对象的地方都可以使用组合对象。
	用户不用关心到底是处理一个叶节点还是处理一个枝节点， 也用不着为定义组合而写一些选择判断语句。
