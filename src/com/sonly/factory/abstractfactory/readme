抽象工厂模式（Abstract Factory） 创建型模式：
	工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，
	所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，
	直接增加新的工厂类就可以了，不需要修改之前的代码。
	
意图：
	提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。 

适用性：
	一个系统要独立于它的产品的创建、组合和表示时。
	一个系统要由多个产品系列中的一个来配置时。
	当你要强调一系列相关的产品对象的设计以便进行联合使用时。
	当你提供一个产品类库，而只想显示它们的接口而不是实现时。

抽象工厂模式与工厂方法模式的区别:
	抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。
	他与工厂方法模式的区别就在于，工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则是针对的多个产品等级结构。
	在编程中，通常一个产品结构，表现为一个接口或者抽象类，也就是说：
	工厂方法模式提供的所有产品都是衍生自同一个接口或抽象类，而抽象工厂模式所提供的产品则是衍生自不同的接口或抽象类。
	在抽象工厂模式中，提出了产品族的概念：所谓的产品族，是指位于不同产品等级结构中功能相关联的产品组成的家族。
	抽象工厂模式所提供的一系列产品就组成一个产品族；而工厂方法提供的一系列产品称为一个等级结构。
	
优点 ：
	封装了产品的创建，使得不需要知道具体是哪种产品，只需要知道是哪个工厂就行了。
	可以支持不同类型的产品，使得模式灵活性更强。
	可以非常方便的使用一族中间的不同类型的产品。

缺点： 
	结构太过臃肿，如果产品类型比较多，或者产品族类比较多，就会非常难于管理。
	每次如果添加一组产品，那么所有的工厂类都必须添加一个方法，这样违背了开放-封闭原则。所以一般适用于产品组合产品族变化不大的情况。
	
静态工厂模式	用来生成同一等级结构中的任意产品, 对于增加新的产品, 需要修改已有代码
工厂方法模式	用来生成同一等级结构的固定产品, 支持增加任意产品;
抽象工厂模式	用来生成不同产品族的全部产品, 对于增加新的产品无能为力;