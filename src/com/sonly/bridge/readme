桥梁模式(Bridge) 结构型：

意图：
	将抽象部分与它的实现部分分离，使它们都可以独立地变化。
	其实就是处理多层继承结构，处理多维变化的场景， 将各个维度设计成独立地继承结构，
	使得各个维度可以独立地扩展，并在抽象层建立关联。

	桥梁模式虽然不是一个使用频率很高的模式，但是熟悉这个模式对于理解面向对象的设计原则，
	包括“开-闭”原则以及组合/聚合复用原则都很有帮助。理解好这两个原则，有助于形成正确的设计思想和培养良好的设计风格。
	桥梁模式的用意是“将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化”。

	抽象化:
　　		从众多的事物中抽取出共同的、本质性的特征，而舍弃其非本质的特征，就是抽象化。

　	实现化:
	　　	抽象化给出的具体实现，就是实现化。
　　		一个类的实例就是这个类的实例化，一个具体子类是它的抽象超类的实例化。

　　	脱耦:
　　		所谓耦合，就是两个实体的行为的某种强关联。而将它们的强关联去掉，就是耦合的解脱，或称脱耦。
		在这里，脱耦是指将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联。

　　		所谓强关联，就是在编译时期已经确定的，无法在运行时期动态改变的关联；
		所谓弱关联，就是可以动态地确定并且可以在运行时期动态地改变的关联。
		显然，在Java语言中，继承关系是强关联，而聚合关系是弱关联。

　　		将两个角色之间的继承关系改为聚合关系，就是将它们之间的强关联改换成为弱关联。
		因此，桥梁模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用聚合关系而不是继承关系，
		从而使两者可以相对独立地变化。这就是桥梁模式的用意。

适用性：
	你不希望在抽象和它的实现部分之间有一个固定的绑定关系。
		例如这种情况可能是因为，在程序运行时刻实现部分应可以被选择或者切换。
	类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。
		这时Bridge 模式使你可以对不同的抽象接口和实现部分进行组合，并分别对它们进行扩充。
	对一个抽象的实现部分的修改应对客户不产生影响，即客户的代码不必重新编译。
	（C++）你想对客户完全隐藏抽象的实现部分。在C++中，类的表示在类接口中是可见的。
	有许多类要生成。这样一种类层次结构说明你必须将一个对象分解成两个部分。
	你想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。

桥梁模式两个等级结构：
　	一、由抽象化角色和修正抽象化角色组成的抽象化等级结构。
	二、由实现化角色和两个具体实现化角色所组成的实现化等级结构。

　　	桥梁模式所涉及的角色有：
		抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。
　　		修正抽象化(RefinedAbstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。
　　		实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。
			必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。
			实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。
　		具体实现化(ConcreteImplementor)角色：这个角色给出实现化角色接口的具体实现。

桥梁模式的优点：
　	分离抽象和实现部分：
　		桥梁模式分离了抽象部分和实现部分，从而极大地提供了系统的灵活性。
		让抽象部分和实现部分独立出来，分别定义接口，这有助于对系统进行分层，从而产生更好的结构化的系统。

 	更好的扩展性：
		桥梁模式使得抽象部分和实现部分可以分别独立地扩展，而不会相互影响，从而大大提高了系统的可扩展性。
		
例子：
	电脑的分类：
		电脑——电脑类别（笔记本、台式机、平板）——品牌