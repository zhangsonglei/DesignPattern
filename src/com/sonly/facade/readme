外观（门面）模式(Facade) 结构型：
	
意图：
	为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，
		这个接口使得这一子系统更加容易使用。

外观模式角色：
	1.门面(Facade)角色 ：客户端可以调用这个角色的方法。
		此角色知晓相关的（一个或者多个）子系统的功能和责任。
		在正常情况下，本角色会将所有从客户端发来的请求委派到相应的子系统去。
	2.子系统(SubSystem)角色 ：可以同时有一个或者多个子系统。
		每个子系统都不是一个单独的类，而是一个类的集合
		每个子系统都可以被客户端直接调用，或者被门面角色调用。
		子系统并不知道门面的存在，对于子系统而言，门面仅仅是另外一个客户端而已。

适用性：
	1.当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越复杂。
		大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容易对子系统进行定制，
		但这也给那些不需要定制子系统的用户带来一些使用上的困难。
		Facade 可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，
		而那些需要更多的可定制性的用户可以越过facade层。
	2.客户程序与抽象类的实现部分之间存在着很大的依赖性。
		引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。
	3.当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。
		如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简化了它们之间的依赖关系。

门面模式的优点：
	1.松散耦合
		门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。
	
	2.简单易用
		门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，
		也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。

　　	3.更好的划分访问层次
		通过合理使用Facade，可以帮助我们更好地划分访问的层次。
		有些方法是对系统外的，有些方法是系统内部使用的。
		把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。
		
例子：
	租房（通过中介，中介去联系各个房主）
	