原型模式（Prototype） 创建型模式：
	用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。
	原型模式就是通过一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节。
	因此， 原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。
	这样一来，通过原型实例创建新的对象，就不再需要关心这个实例本身的类型，只要实现了克隆自身的方法，
	就可以通过这个方法来获取新的对象，而无须再去通过new来创建。

意图：
	用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。

适用性：
	当要实例化的类是在运行时刻指定时，例如，通过动态装载；或者
	为了避免创建一个与产品类层次平行的工厂类层次时；或者
	当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。

浅复制与深复制：
	浅复制：
		创建当前对象的浅复制版本， 方法是创建一个新对象， 然后将当前对象的非静态字段复制到该新对象。 
		如果字段是值类型， 则对该字段执行逐位复制； 如果字段是引用类型， 则复制引用但不复制引用的对象。
		因此原始对象及其副本引用同一对象。
		将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。
		
	深复制：
		把引用对象的变量指向复制过来的新对象，而不是原有的被引用的对象。	
		将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。
		要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。
		
	简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。

应用场景:
	原型模式很少单独出现，一般都是与工厂方法模式一起出现，通过clone方法创建一个对象，然后由工厂返回给调用者。
	像Spring中的Bean的创建模式就有singleton与prototype模式。
	
例子：
	模仿多利羊的诞生过程。