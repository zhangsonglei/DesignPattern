访问者模式(Visitor) 行为型：

意图：
	定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
	TemplateMethod使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

适用性：
	1.一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。
	2.各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。
	3.控制子类扩展。模板方法只在特定点调用“hook ”操作，这样就只允许在这些点进行扩展。

角色：
	1.抽象访问者：抽象类或者接口，声明访问者可以访问哪些元素，
		具体到程序中就是visit方法中的参数定义哪些对象是可以被访问的。
	2.访问者：实现抽象访问者所声明的方法，它影响到访问者访问到一个类后该干什么，要做什么事情。
	3.抽象元素类：接口或者抽象类，声明接受哪一类访问者访问，程序上是通过accept方法中的参数来定义的。
		抽象元素一般有两类方法，一部分是本身的业务逻辑，另外就是允许接收哪类访问者来访问。
	4.元素类：实现抽象元素类所声明的accept方法，
		通常都是visitor.visit(this)，基本上已经形成一种定式了。
	5.结构对象：一个元素的容器，一般包含一个容纳多个不同类、不同接口的容器，如List、Set、Map等。
	
优点：
	1.符合单一职责原则：
		凡是适用访问者模式的场景中，元素类中需要封装在访问者中的操作必定是与元素类本身关系不大且是易变的操作，
		使用访问者模式一方面符合单一职责原则。另一方面，因为被封装的操作通常来说都是易变的，所以当发生变化时，
		就可以在不改变元素类本身的前提下，实现对变化部分的扩展。
	2.扩展性良好：元素类可以通过接受不同的访问者来实现对不同操作的扩展。