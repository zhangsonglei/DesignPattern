责任链 (Chain of Responsibility) 行为型：

意图：
	使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。
	将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。

适用性：
	1.有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。
	2.你想在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。
	3.可处理一个请求的对象集合应被动态指定。
	Java异常机制: 一个try对应多个catch;
	Servlet: Filter链式处理;
	Spring MVC : 拦截器链(详见: Spring MVC 实践);
	
责任连模式的结构：
	抽象处理类：
		抽象处理类中主要包含一个指向下一处理类的成员变量nextHandler和
		一个处理请求的方法handRequest。handRequest方法的主要主要思想是，
		如果满足处理的条件，则有本处理类来进行处理，否则由nextHandler来处理。
	具体处理类：
		具体处理类主要是对具体的处理逻辑和处理的适用条件进行实现。
	
优点:
	1.降低耦合度: 
		客户提交一个请求，请求沿链传递直至一个ConcreteHandler最终处理，
		接收者和发送者都没有对方的明确信息，便于接受者与发送者的解耦。
	2.增强给对象指派职责的灵活性: 
		链中对象自己并不清楚链结构，他们仅保持一个后继者指针。
		因此责任链可简化对象的相互连接，且可以随时增加或修改处理请求的对象，
		增强了给对象指派职责的灵活性。
		
缺点: 
	不保证被接受: 
		既然一个请求没有明确的接收者，那么就不能保证它能一定被正确处理。
		即一个请求有可能到了链的末端也得不到处理，或因为没有正确配置链顺序而得不到“正确”处理。

相关模式： 
	Composite(组合)模式: 这种情况下，一个构件的父构件可作为它的后继者。

实例：
	雇员要求 (请假 & 涨薪)：
	要经过总监Director -> 经理Manager -> 总经理GeneralManager的层层审批。

	