迭代器/迭代子模式(Iterator) 行为型：

意图：
	提供一种方法顺序访问一个聚合对象(如List、Set)中各个元素, 而又不需暴露该对象的内部表示。

适用性：
	1.访问一个聚合对象的内容而无需暴露它的内部表示。
	2.支持对聚合对象的多种遍历。
	3.为遍历不同的聚合结构提供一个统一的接口(即，支持多态迭代)。

白箱聚集与外禀迭代子：
	如果一个聚集的接口提供了可以用来修改聚集元素的方法，这个接口就是所谓的宽接口。
	如果聚集对象为所有对象提供同一个接口，也就是宽接口的话，当然会满足迭代子模式对迭代子对象的要求。
	但是，这样会破坏对聚集对象的封装。这种提供宽接口的聚集叫做白箱聚集。

	由于聚集自己实现迭代逻辑，并向外部提供适当的接口，使得迭代子可以从外部控制聚集元素的迭代过程。
	这样一来迭代子所控制的仅仅是一个游标而已，这种迭代子叫做游标迭代子（Cursor Iterator）。
	由于迭代子是在聚集结构之外的，因此这样的迭代子又叫做外禀迭代子（Extrinsic Iterator）。

黑箱聚集与内禀迭代子：
	如果一个聚集的接口没有提供修改聚集元素的方法，这样的接口就是所谓的窄接口。
	聚集对象为迭代子对象提供一个宽接口，而为其他对象提供一个窄接口。
	换言之，聚集对象的内部结构应当对迭代子对象适当公开，以便迭代子对象能够对聚集对象有足够的了解，
	从而可以进行迭代操作。但是，聚集对象应当避免向其他的对象提供这些方法，
	因为其他对象应当经过迭代子对象进行这些工作，而不是直接操控聚集对象。

	由于迭代子是聚集的内部类，迭代子可以自由访问聚集的元素，
	所以迭代子可以自行实现迭代功能并控制对聚集元素的迭代逻辑。
	由于迭代子是在聚集的结构之内定义的，因此这样的迭代子又叫做内禀迭代子（Intrinsic Iterator）。


角色：
	迭代器 （Iterator）: 
		定义访问和遍历元素的接口。
	聚合（Aggregate）:  
		定义创建响应迭代器对象的接口。
	具体聚集（ConcreteAggregate）:  
		实现Iterable接口, 返回ConcreteIterator的一个适当的实例。
	具体迭代器（ConcreteIterator）:  
		实现Iterator接口(最好作为具体聚集的内部类), 对该聚集遍历时跟踪当前位置。

使用场景：
	1.当需要访问一个聚集对象，且不需要了解其内部实现的时，就应该考虑使用迭代器模式。
	2.当需要对聚集有多种方式遍历时，可以考虑使用迭代器模式。

迭代子模式优点：
	1.迭代子模式简化了聚集的接口。迭代子具备了一个遍历接口，这样聚集的接口就不必具备遍历接口。
	2.每一个聚集对象都可以有一个或多个迭代子对象，每一个迭代子的迭代状态可以是彼此独立的。
		因此，一个聚集对象可以同时有几个迭代在进行之中。
	3.由于遍历算法被封装在迭代子角色里面，因此迭代的算法可以独立于聚集角色变化。
	
