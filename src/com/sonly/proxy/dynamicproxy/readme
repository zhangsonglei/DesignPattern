代理模式(Proxy) 结构型模式：

意图：
	为其他对象提供一种代理以控制对这个对象的访问
	(可以详细控制访问某个对象的方法， 在调用这个方法[前/后]做[前/后]置处理， 从而实现将统一流程放到代理类中处理)。

适用性：
	在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式： 
		远程代理（Remote Proxy）为一个对象在不同的地址空间提供局部代表。  
		虚代理（Virtual Proxy）根据需要创建开销很大的对象。 
		保护代理（Protection Proxy）控制对原始对象的访问。保护代理用于对象应该有不同 的访问权限的时候。
		智能指引（Smart Reference）取代了简单的指针，它在访问对象时执行一些附加操作。 它的典型用途包括：
			对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它。
			当第一次引用一个持久对象时，将它装入内存。
			在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。
		安全代理: 屏蔽对真实角色的访问，用代理来控制对真实对象的访问权限。
		延迟加载: 先加载轻量级代理对象,真正需要时再加载真实对象。

代理中的角色：
	抽象接口：声明真实对象和代理对象的共同接口。
	代理对象：代理对象内部包含真实对象的引用，从而可以操作真实对象；
		        同时，代理对象与真实对象有相同的接口，能在任何时候代替真实对象，
		        而且代理可以在真实对 象前后加入特定的逻辑以实现功能的扩展。
	真实对象：代理对象所代表的对象；是我们最终要引用的对象。

例子：
	模拟请明星唱歌这个过程：签约，唱歌和收款。

Java代理分类：
	静态代理: 手动定义代理类
	动态代理: 动态生成代理类 
		JDK自带的动态代理
		JavaAssist字节码操作库实现
		CGLib
		ASM(底层使用指令, 可维护性差)

静态代理 VS 动态代理 VS 代理工厂：
	1. 使用静态代理模式，那么真实角色必须是事先已经存在的，并将其作为代理对象的内部属性；
	2. 但是实际的Java应用中，如果有一批真实对象，而毎个代理对象只对应一个真实对象的话，会导致类的急剧膨胀。
	         如果我们事先并不知道真实角色，那么可以通过java的动态代理机制来解决。
	3. 动态代理虽然可以使得我们不用在手写代理对象的代码，但是InvocationHandler还是面向特定的抽象接口的来写的；
	         而代理工厂可以让我们的代码写的更加抽象(而不必面向确定的抽象接口写代码)。
	         代理工厂的目标是目标对象和增强方法皆可改变, 这个模式在现实中的表现就是: 
		a. 明星对代理并不一定是从一而终的，明星随时都可能会换代理(助手) 
		b. 明星不一定只会唱歌，他还有可能会跳舞 
		c. 代理可能不只是为一个明星服务
	         这样，我们就实现一个代理工厂-可以随意更换代理所做的辅助性工作，而目标对象也可以随时增加新的方法。 


	

	
	